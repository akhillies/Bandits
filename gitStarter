Overall Summary of things to do with Git and GitHub

TERMINOLOGY:
repository - this is the place where everything that is shared between team members is stored, it is online and basically the center of all of our work
push (pushing) - this means "uploading" all the changes you made on your computer to the repository so other people can also have those changes
pull (pulling) - this is the opposite of "pushing" as this is how you "download" all the changes that someone else has made onto your computer
README - this is just a sort of introduction to things, usually has some summary or quick information so people can understand the basics of what is happening
wiki - simple, just a place where someone who is unfamiliar with the project or who wants to confirm something goes to in order to understand something about the project. It is important that everyone updates the wiki with whatever information they can (for example, folder structure, who is doing what, where things are, etc.)
local - this means "on your computer," it is local to you. These changes no one else can see, they are not in the repository that everything else has access to
merge - this is less of a terminology than a concept. Basically when two people edit the same repository and push their changes, GitHub has to "merge" the changes. Now this is all fine and dandy if all the files edited are different, but if both people changed the same file, GitHub tries to compare the two and determine what was actually changed in the file. Now this system is very good for any text-based file (like files with code) but outside of that it is horrible. So if two people are working on, for example, the same Maya ASCII file, then when they push it, GitHub will try to "merge" these files but have no idea how to; meaning one of the two people's work will have gone to waste since only 1 of the edited files can stay. The best way to avoid this problem is to communicate who is working on what specific file and to only use references to that file if you need it in another case and to push and pull often (at the very least, before you start working ad after you finish)


There are a few things to understand about Git:
1)	There are 6 commands you will be using for GitHub (these are basic summaries, more in-depth is farther down)
		git status - tells you where your files are in relation to the repository
		git add - adds a file to be committed (like pressing the "save" button when overwriting something)
		git checkout - resets a file that you have used "git add" on BEFORE committing it (kind of like undo-ing ALL the changes you made to that file but there is no redo)
		git commit - commits the file to be added to the repository (like pressing a "confirm" button after saving to overwrite)
		git push - pushes all the commits you have stored on your computer to the repository (basically uploads all of your changes so other people have them too).
		git pull - pulls all the commits other people have made to your computer (basically you update your files to have all the changes other people made)
2)	You must always commit everything on your computer before pulling from the repository and always pull from the repository before pushing your own commits
		If you EVER see anything about merging failing or a push/pull fails, IMMEDIATELY STOP and ask someone who is familiar with Git to help you. It will save everyone a lot more trouble because "merges"
3)	If you make a mistake in adding a file, it is easy to rectify. A mistake in committing is also relatively easy to undo, but please do NOT make mistakes in pushing commits - that is painful to fix.
4)	If you are unsure of ANYTHING, ask ask ask. There are many issues and problems that can be avoided if someone just asks before doing it.

Now to GitHub:
1)	So first thing to realize is that it is important that NO ONE uses the desktop application for GitHub. I know it makes it all nice and easy to understand what is going on, but it also makes it easy to screw up a lot of things that are hard to fix.
2)	You can edit all of the files locally without worrying about what other people are doing. However when it comes time to push